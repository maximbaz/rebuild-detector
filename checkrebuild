#!/bin/bash
#
# Detect broken packages that need to be rebuilt

shopt -s nullglob
shopt -s extglob

log="$(mktemp -d)"
trap 'rm -rf "$log"' EXIT

verbose=0
while getopts "v" OPTION; do
    case $OPTION in
        v) verbose=1 ;;
        *) exit 1 ;;
    esac
done

get_unofficial_pkgs() {
    official_repos="testing core extra community-testing community multilib-testing multilib"
    comm -23 <(pacman -Qq | sort) <(pacman -Sl $official_repos 2>/dev/null | awk '/\[.*[[:alpha:]]+]$/ {print $2};/\[.*[[:digit:]]+]$/ {print $2}' | sort)
}

filter_executable() {
    while read -r file; do
        [[ -f $file && -x $file ]] && echo $file
    done
}

get_broken_ldd_pkgs() {
    get_unofficial_pkgs |
    xargs pacman -Qql |
    sed -E "s/(\"|')/\\\\\1/g"|
    xargs readlink -f |
    filter_executable |
    parallel --will-cite '
        ldd "{}" 2>/dev/null |
        grep "not found" > >( out="$(cat)"; f="$RANDOM"; [ -n "$out" ] && { echo -e "\nldd {}\n" >> "'$log'/$f"; c++filt "$out" >> "'$log'/$f"; } ) &&
        pacman -Qqo "{}"'
}

get_broken_python_pkgs() {
    command -v python >/dev/null || return
    python_version="$(python3 -c 'import sys; print (sys.version_info.minor)')"
    pacman -Qqo /usr/lib/python3.!($python_version) 2>/dev/null
}

get_broken_perl_pkgs() {
    command -v perl >/dev/null || return
    perl_version="$(perl -E 'say $^V =~ /(\d+[.]\d+)/')"
    pacman -Qqo /usr/lib/perl*/!($perl_version) 2>/dev/null
}

get_broken_pkgs() {
    {
        get_broken_ldd_pkgs
        get_broken_python_pkgs
        get_broken_perl_pkgs
    } | sort -u
}

get_repo_pkgs() {
    pacman -Sl | cut -d' ' -f1-2
    pacman -Qqm | awk '{print "foreign", $0}'
}

join -12 <(get_repo_pkgs | sort -k2) <(get_broken_pkgs) | awk '{ print $2 "\t" $1 }'

if (( verbose )); then
    cd "$log"
    for f in *; do
        cat "$f"
    done
fi

exit 0
